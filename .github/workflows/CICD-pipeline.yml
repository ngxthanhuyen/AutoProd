name: CI/CD Pipeline
 
on:
  push:
    branches:
      - main

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps: 
      - name: Checkout repository
        uses: actions/checkout@v3

      # --- Spring Boot ---
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Build Spring Boot JAR with Maven
        run: |
          cd springboot-application
          chmod +x ./mvnw
          ./mvnw clean package -DskipTests

      # --- Docker ---
      - name: Build Spring Boot Docker image
        run: |
          cd springboot-application
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/springboot-application:latest .

      - name: Build Flask Docker image
        run: |
          cd flask-application
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/flask-application:latest .

      - name: Log in to Docker Hub using token
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Push Docker images to Docker Hub
        run: |
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/springboot-application:latest
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/flask-application:latest

      # --- Connecter via SSH ---
      - name: Setup SSH Agent
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.VM_SSH_KEY }}

      # --- Tester la connexion SSH avant le déploiement ---
      - name: Test SSH Connection
        run: |
          ssh -o StrictHostKeyChecking=no -o ConnectTimeout=30 -v ubuntu@${{ secrets.VM_HOST }} "echo 'SSH Connection successful!'"

      # --- Déploiement ---
      - name: Deploy with docker-compose to VM
        run: |
          ssh -o StrictHostKeyChecking=no ubuntu@${{ secrets.VM_HOST }} << 'EOF'
            cd /home/ubuntu
      
            # S'assurer que docker-compose est installé
            sudo curl -L "https://github.com/docker/compose/releases/download/v2.22.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
            docker-compose --version
      
            # Pull des dernières images depuis Docker Hub
            docker-compose pull
      
            # Démarrer tous les services en arrière-plan
            docker-compose up -d
      
            # Vérifier l'état des conteneurs
            docker ps
          EOF


     
