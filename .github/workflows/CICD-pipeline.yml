name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # --- Spring Boot ---
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Build Spring Boot JAR with Maven
        run: |
          cd springboot-application
          chmod +x ./mvnw
          ./mvnw clean package -DskipTests

      # --- Docker ---
      - name: Build Spring Boot Docker image
        run: |
          cd springboot-application
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/springboot-application:latest .

      - name: Build Flask Docker image
        run: |
          cd flask-application
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/flask-application:latest .

      - name: Log in to Docker Hub using token
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Push Docker images to Docker Hub
        run: |
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/springboot-application:latest
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/flask-application:latest

      # --- Connecter via SSH ---
      - name: Setup SSH Agent
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.VM_SSH_KEY }}

      # --- Tester la connexion SSH avant le déploiement ---
      - name: Test SSH Connection
        run: |
          ssh -o StrictHostKeyChecking=no -o ConnectTimeout=30 -v ubuntu@${{ secrets.VM_HOST }} "echo 'SSH Connection successful!'"

      # --- Déploiement ---
      - name: Deploy to VM
        run: |
          ssh -o StrictHostKeyChecking=no ubuntu@${{ secrets.VM_HOST }} << 'EOF'
            # Ajouter l'utilisateur au groupe docker
            sudo usermod -aG docker ubuntu
      
            echo "Stopping old containers if exist..."
            docker stop springboot-app flask-app mongo 2>/dev/null || true
            docker rm springboot-app flask-app mongo 2>/dev/null || true
      
            echo "Starting MongoDB container..."
            docker run -d \
              --name mongo \
              -p 27017:27017 \
              -v mongo-data:/data/db \
              mongo:6
      
            echo "Pulling latest Docker images for apps..."
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/springboot-application:latest
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/flask-application:latest
      
            echo "Starting Spring Boot container..."
            docker run -d \
              --name springboot-app \
              -p 8080:8080 \
              -e SPRING_DATA_MONGODB_URI="mongodb://mongo:27017/testdb" \
              --link mongo:mongo \
              ${{ secrets.DOCKERHUB_USERNAME }}/springboot-application:latest
      
            echo "Starting Flask container..."
            docker run -d \
              --name flask-app \
              -p 5001:5001 \
              -e MONGO_URI="mongodb://mongo:27017/image_db" \
              --link mongo:mongo \
              ${{ secrets.DOCKERHUB_USERNAME }}/flask-application:latest
      
            echo "Deployment completed! Running containers:"
            docker ps
            docker volume ls
          EOF
      
           
