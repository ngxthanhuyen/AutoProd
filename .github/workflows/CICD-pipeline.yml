name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1️⃣ Récupérer le code
      - name: Checkout repository
        uses: actions/checkout@v3

      # 2️⃣ Configurer JDK pour Spring Boot
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # 3️⃣ Build Spring Boot
      - name: Build Spring Boot JAR
        run: |
          cd springboot-application
          chmod +x ./mvnw
          ./mvnw clean package -DskipTests

      # 4️⃣ Build Docker images
      - name: Build Spring Boot Docker image
        run: |
          cd springboot-application
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/springboot-application:latest .

      - name: Build Flask Docker image
        run: |
          cd flask-application
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/flask-application:latest .

      # 5️⃣ Login Docker Hub
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 6️⃣ Push Docker images
      - name: Push Docker images to Docker Hub
        run: |
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/springboot-application:latest
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/flask-application:latest

      # 7️⃣ Configurer SSH
      - name: Setup SSH Agent
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.VM_SSH_KEY }}

      # 8️⃣ Déployer sur la VM avec docker-compose
      - name: Deploy on VM
        run: |
          # Copier docker-compose.yml sur la VM
          scp -o StrictHostKeyChecking=no docker-compose.yml ubuntu@${{ secrets.VM_HOST }}:~/docker-compose.yml

          # Lancer docker-compose up
          ssh -o StrictHostKeyChecking=no ubuntu@${{ secrets.VM_HOST }} << 'EOF'
            sudo usermod -aG docker ubuntu
            # Déconnecte/reconnecte si nécessaire
            cd ~
            docker-compose down
            docker-compose pull
            docker-compose up -d
            docker ps
          EOF
